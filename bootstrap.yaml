---
- name: Create an Assisted Installer provisioned OpenShift Cluster on Libvirt/KVM
  hosts: localhost
  connection: local
  gather_facts: true

  vars:
    cluster_id: ""
    cluster_status: ""
    deployment_name: ""
    compiled_uri_headers:
      User-Agent: AnsibleAutomation/4.2

  tasks:
    - name: Read in variables
      include_vars:
        dir: vars
        extensions:
          - 'yaml'
          - 'yml'

    - name: Preflight Checks
      include_tasks: tasks/preflight.yaml

    - name: Set up Authentication Headers if needed
      include_tasks: tasks/ai_svc_setup_auth_headers.yaml
      when: assisted_service_authentication != "none"

    - name: Preflight Version Checks
      include_tasks: tasks/ai_svc_query_openshift_versions.yaml

    - name: Nutanix Preflight
      include_tasks: tasks/nutanix_set_facts.yaml

    - name: Read AI Service, check for existing cluster
      uri:
        headers: "{{ compiled_uri_headers }}"
        url: "{{ assisted_service_endpoint }}/clusters"
        return_content: yes
        method: GET
      register: read_clusters

    - name: Set facts if cluster exists
      set_fact:
        cluster_id: "{{ item.id }}"
        cluster_status: "{{ item.status }}"
      loop: "{{ read_clusters.json }}"
      when: (item.base_dns_domain == cluster_domain) and (item.name == cluster_name)

    # y tho? oh yeah, if importing, duh lololo
    - name: Create Cluster Asset Generation Directory
      file:
        path: "{{ generated_asset_directory }}/{{ cluster_id }}"
        state: directory
      when: cluster_id != ""

    - name: Create Cluster if it does not already exist
      block:
        - name: Set random var for this deployment json run
          set_fact:
            deployment_name: "{{ lookup('password', '/dev/null chars=ascii_lowercase,digits length=8') }}"

        - name: SSH Key Generation & Reading
          include_tasks: tasks/ssh_keys.yaml

        - name: Create the base cluster deployment definition
          include_tasks: tasks/ai_svc_create_cluster.yaml
      when: cluster_id == ""

    - name: Set Cluster Configuration
      block:

        - name: Create Cluster Asset Generation Directory
          file:
            path: "{{ generated_asset_directory }}/{{ cluster_id }}"
            state: directory

        - name: Copy deployment file into cluster directory
          copy:
            remote_src: true
            src: "{{ generated_asset_directory }}/deployment-{{ deployment_name }}.json"
            dest: "{{ generated_asset_directory }}/{{ cluster_id }}/deployment.json"

        - name: Remove old named deployment.json
          file:
            path: "{{ generated_asset_directory }}/deployment-{{ deployment_name }}.json"
            state: absent

        - name: SSH Key Migration
          include_tasks: tasks/ssh_keys.yaml

        - name: Patch in Cluster Preconfiguration for Networking
          include_tasks: tasks/ai_svc_preconfig_networking.yaml

        - name: Configure ISO Parameters
          include_tasks: tasks/ai_svc_configure_iso_params.yaml
          
      when: deployment_name != ""

    - name: Create Nutanix Infrastructure
      block:
      ## Unauthed source, pass the bare image download endpoint from the AI SVC API to the Nutanix api
      - name: Create & Upload Image from unsecured AI Svc
        include_tasks: tasks/nutanix_create_image_v2.yaml
        vars:
          image_source_uri: "{{ assisted_service_endpoint }}/clusters/{{ cluster_id }}/downloads/image"
          image_name: "ocp-ai-{{ cluster_id }}"
          image_description: "OpenShift Assisted Installer ISO for Cluster {{ cluster_name }} with Cluster ID {{ cluster_id }}"
        when: assisted_service_authentication == "none"

      - name: Create the web server and proxy the image
        block:
        - name: Get list of images
          uri:
            url: "{{ nutanix_prism_endpoint }}{{ nutanix_prism_api_v2_base }}/images?include_vm_disk_paths=false&include_vm_disk_sizes=false'"
            return_content: yes
            method: GET
            status_code: 200
            body_format: json
            force_basic_auth: yes
            user: "{{ nutanix_prism_username }}"
            password: "{{ nutanix_prism_password }}"
            validate_certs: "{{ not nutanix_prism_skip_ssl_verification|bool }}"
          register: nutanix_images_info

        - name: Set Image Info
          set_fact:
            nutanix_ocp_ai_iso_uuid: "{{ image.uuid }}"
            nutanix_ocp_ai_iso_vm_disk_uuid: "{{ image.vm_disk_id }}"
          when: image.name == "ocp-ai-{{ cluster_id }}"
          loop: "{{ nutanix_images_info.json.entities }}"
          loop_control:
            loop_var: image

        - name: Conditionally create the local image relay
          block:
          - name: Create local directory for web server
            file:
              state: directory
              path: "{{ generated_asset_directory }}/{{ cluster_id }}/tmp_server"

          - name: Create web server python script
            lineinfile:
              create: yes
              dest: "{{ generated_asset_directory }}/{{ cluster_id }}/tmp_server/server.py"
              mode: 0755
              line: |
                import os
                from http.server import HTTPServer, CGIHTTPRequestHandler
                # Make sure the server is created at current directory
                os.chdir('.')
                # Create server object listening the port 8901
                server_object = HTTPServer(server_address=('', 8901), RequestHandlerClass=CGIHTTPRequestHandler)
                # Start the web server
                server_object.serve_forever()

          - name: Execute python script
            shell: |
              cd {{ generated_asset_directory }}/{{ cluster_id }}/tmp_server
              python3 server.py &> /dev/null &
              echo $!
            register: python_script_out

          - name: Download the ISO locally
            get_url:
              headers: "{{ compiled_uri_headers }}"
              url: "{{ assisted_service_endpoint }}/clusters/{{ cluster_id }}/downloads/image"
              dest: "{{ generated_asset_directory }}/{{ cluster_id }}/tmp_server/ocp-ai-{{ cluster_id }}.iso"

          - name: Create & Upload Image from RH Hosted AI SVC
            include_tasks: tasks/nutanix_create_image_v2.yaml
            vars:
              image_source_uri: "http://{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}:8901/ocp-ai-{{ cluster_id }}.iso"
              image_name: "ocp-ai-{{ cluster_id }}"
              image_description: "OpenShift Assisted Installer ISO for Cluster {{ cluster_name }} with Cluster ID {{ cluster_id }}"

          always:
          - name: Stop the python web server
            shell: "kill {{ python_script_out.stdout }}"
            ignore_errors: yes

          - name: Clean up local files
            file:
              state: absent
              path: "{{ generated_asset_directory }}/{{ cluster_id }}/tmp_server"
          when: nutanix_ocp_ai_iso_uuid is not defined
        when: assisted_service_authentication == "bearer-token"

      - name: Create VMs on via Prism
        include_tasks: tasks/nutanix_create_vms_mixed_api_dumb_shit.yaml
        loop: "{{ cluster_nodes }}"
        loop_control:
          loop_var: node
      tags:
        - create_nutanix_cluster

    - name: Wait for hosts to report into the Assisted Installer service
      include_tasks: tasks/ai_svc_check_for_hosts.yaml

    - name: Set Host Names and Roles for Standard HA OpenShift Cluster
      include_tasks: tasks/ai_svc_set_host_names_roles.yaml
      when: cluster_type == "Standard"

    - name: Set Network VIPs
      include_tasks: tasks/ai_svc_set_vips.yaml

    - name: Check to make sure the hosts are ready and the cluster can be installed
      include_tasks: tasks/ai_svc_check_install_ready.yaml

    - name: Set Cilium Networking Cluster Manifests
      include_tasks: tasks/networking_cilium.yaml
      when: cluster_network_type == "Cilium"

    - name: Set Calico Networking Cluster Manifests
      include_tasks: tasks/networking_calico.yaml
      when: cluster_network_type == "Calico"

    - name: Start the Cluster installation
      include_tasks: tasks/ai_svc_start_install.yaml

    - name: Wait for the cluster to be fully installed
      include_tasks: tasks/ai_svc_check_cluster_install_finished.yaml

    - name: Pull cluster credentials
      include_tasks: tasks/ai_svc_query_cluster_credentials.yaml

    - name: Deploy default post-installation cluster workloads
      include_tasks: "{{ item }}"
      with_fileglob:
        - post-tasks/*.yml
        - post-tasks/*.yaml