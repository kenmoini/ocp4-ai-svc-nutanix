---
- name: Get list of images
  uri:
    url: "{{ nutanix_prism_endpoint }}{{ nutanix_prism_api_v3_base }}/images/list"
    return_content: yes
    method: POST
    status_code: 200
    body_format: json
    body: '{"kind":"image", "filter": "name=={{ image_name }}"}'
    force_basic_auth: yes
    user: "{{ nutanix_prism_username }}"
    password: "{{ nutanix_prism_password }}"
    validate_certs: "{{ not nutanix_prism_skip_ssl_verification|bool }}"
  register: nutanix_images_info

- name: Set Image UUID
  set_fact:
    nutanix_ocp_ai_iso_uuid: "{{ image.metadata.uuid }}"
  when: image.spec.name == image_name
  loop: "{{ nutanix_images_info.json.entities }}"
  loop_control:
    loop_var: image

- name: Create Image if it does not exist
  uri:
    url: "{{ nutanix_prism_endpoint }}{{ nutanix_prism_api_v3_base }}/images"
    return_content: yes
    method: POST
    status_code: 202
    body_format: json
    body: '{"api_version":"3.1.0","metadata":{"kind":"image"},"spec":{"name":"{{ image_name }}","description":"{{ image_description }}","resources":{"image_type": "ISO_IMAGE", "source_options": {"allow_insecure_connection": true}, "source_uri": "{{ image_source_uri }}", "storage_container_reference": {"uuid": "something"}} } }'
    force_basic_auth: yes
    user: "{{ nutanix_prism_username }}"
    password: "{{ nutanix_prism_password }}"
    validate_certs: "{{ not nutanix_prism_skip_ssl_verification|bool }}"
  when: nutanix_ocp_ai_iso_uuid is not defined
  register: nutanix_create_image_info

- name: Set Image UUID after creation
  block:
  - name: Set Image UUID
    set_fact:
      nutanix_ocp_ai_iso_uuid: "{{ nutanix_create_image_info.json.metadata.uuid }}"
  when: nutanix_create_image_info is defined