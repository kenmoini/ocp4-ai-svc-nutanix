---

- name: Set up Disks Metadata - {{ cluster_name }}-{{ node.name }}
  include_tasks: nutanix_vm_meta_setup_disks.yaml

- name: Set up NIC Metadata - {{ cluster_name }}-{{ node.name }}
  include_tasks: nutanix_vm_meta_setup_nics.yaml

- name: Check for this VM - {{ cluster_name }}-{{ node.name }}
  uri:
    url: "{{ nutanix_prism_endpoint }}{{ nutanix_prism_api_v3_base }}/vms/list"
    return_content: yes
    method: POST
    status_code: 200
    body_format: json
    body: '{"kind":"vm", "filter": "vm_name=={{ cluster_name }}-{{ node.name }}"}'
    force_basic_auth: yes
    user: "{{ nutanix_prism_username }}"
    password: "{{ nutanix_prism_password }}"
    validate_certs: "{{ not nutanix_prism_skip_ssl_verification|bool }}"
  register: nutanix_vm_check

- name: Create VM processes - {{ cluster_name }}-{{ node.name }}
  block:
  - name: Create VM - {{ cluster_name }}-{{ node.name }}
    uri:
      url: "{{ nutanix_prism_endpoint }}{{ nutanix_prism_api_v2_base }}/vms"
      return_content: yes
      method: POST
      status_code: 201
      body_format: json
      force_basic_auth: yes
      user: "{{ nutanix_prism_username }}"
      password: "{{ nutanix_prism_password }}"
      validate_certs: "{{ not nutanix_prism_skip_ssl_verification|bool }}"
#          "allow_live_migrate": false,
      body: >
        {
          "name": "{{ cluster_name }}-{{ node.name }}",
          "description": "OpenShift {{ node.type }} node",
          "machine_type": "PC",
          "power_state": "OFF",
          "timezone": "UTC",
          "memory_reservation_mb": {{ node.vm.memory }},
          "memory_mb": {{ node.vm.memory }},
          "num_vcpus": {{ node.vm.cpu_sockets }},
          "num_cores_per_vcpu": {{ node.vm.cpu_cores }},
          "vm_nics": {{ nu_nic_config | to_json }},
          "vm_disks": {{ vm_disk_config | to_json }},
          "serial_ports": [
            {
              "type": "SERVER",
              "index": 0
            },
            {
              "type": "SERVER",
              "index": 1
            }
          ]
        }
#          "vm_features": {
#            "AGENT_VM": false,
#            "VGA_CONSOLE": true
#          }
    register: nutanix_create_vm_info

  - name: Probe for Task Info until it is complete
    include_tasks: nutanix_probe_task_v2.yaml
    vars:
      task_uuid: "{{ nutanix_create_vm_info.json.task_uuid }}"

  when: nutanix_vm_check.json.entities | length == 0

- name: Attach Disks to {{ cluster_name }}-{{ node.name }} by redefining VM via API v3
  include_tasks: nutanix_attach_disks.yaml

- name: Boot VM - {{ cluster_name }}-{{ node.name }}
  block:
  - name: Get VM UUID
    uri:
      url: "{{ nutanix_prism_endpoint }}{{ nutanix_prism_api_v3_base }}/vms/list"
      return_content: yes
      method: POST
      status_code: 200
      body_format: json
      body: '{"kind":"vm", "filter": "vm_name=={{ cluster_name }}-{{ node.name }}"}'
      force_basic_auth: yes
      user: "{{ nutanix_prism_username }}"
      password: "{{ nutanix_prism_password }}"
      validate_certs: "{{ not nutanix_prism_skip_ssl_verification|bool }}"
    register: nutanix_vm_check

  - name: Boot {{ cluster_name }}-{{ node.name }} VM with API v2
    uri:
      url: "{{ nutanix_prism_endpoint }}{{ nutanix_prism_api_v2_base }}/vms/{{ nutanix_vm_check.json.entities[0].metadata.uuid }}/set_power_state"
      return_content: yes
      method: POST
      status_code: 201
      body_format: json
      force_basic_auth: yes
      user: "{{ nutanix_prism_username }}"
      password: "{{ nutanix_prism_password }}"
      validate_certs: "{{ not nutanix_prism_skip_ssl_verification|bool }}"
      body: >
        {
          "transition": "ON"
        }
    register: nutanix_boot_vm_info
    when: nutanix_vm_check.json.entities[0].status.resources.power_state != "ON"
